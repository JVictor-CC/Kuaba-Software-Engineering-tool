package br.ucam.kuabaSubsystem.kuabaModel.impl;

import br.ucam.kuabaSubsystem.repositories.KuabaRepository;
import java.util.Collection;
import java.util.Iterator;

import br.ucam.kuabaSubsystem.kuabaModel.*;


import java.util.Collections;
/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#Argument
 *
 * @version generated on Sat Jun 21 10:48:19 BRT 2008
 */

public class DefaultArgument extends DefaultReasoningElement implements Argument {

    public DefaultArgument(String id, KuabaRepository repo) {
        super(id, repo);
    }  

    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#considers

    public Question getConsiders() {
        Collection c = getObjectPropertyValues("considers");
        if (c.isEmpty()) return null;
        return (Question) c.iterator().next();
    }

    public boolean hasConsiders() {
        return hasProperty("considers");
    }

    public void setConsiders(Question newConsiders) {
        Collection c = Collections.singleton(newConsiders);
        setObjectPropertyValues("considers", c);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#inFavorOf

    public Collection<Idea> getInFavorOf() {
        return getObjectPropertyValues("inFavorOf");
    }

    public boolean hasInFavorOf() {
        return hasProperty("inFavorOf");
    }


    public Iterator<Idea> listInFavorOf() {
        return getObjectPropertyValues("inFavorOf").iterator();
    }


    public void addInFavorOf(Idea newInFavorOf) {
    	this.removeObjectsTo(newInFavorOf);
        addObjectPropertyValue("inFavorOf", newInFavorOf);
    }


    public void removeInFavorOf(Idea oldInFavorOf) {
        removeObjectPropertyValue("inFavorOf", oldInFavorOf);
    }


    public void setInFavorOf(Collection<Idea> newInFavorOf) {
        setObjectPropertyValues("inFavorOf", newInFavorOf);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isVersionOf

    public Argument getIsVersionOf() {
        Collection c = getObjectPropertyValues("isVersionOf");
        if (c.isEmpty()) return null;
        return (Argument) c.iterator().next();
    }

    public boolean hasIsVersionOf() {
        return hasProperty("isVersionOf");
    }

    public void setIsVersionOf(Argument newIsVersionOf) {
        Collection c = Collections.singleton(newIsVersionOf);
        setObjectPropertyValues("isVersionOf", c);
    }

    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#objectsTo

    public Collection<Idea> getObjectsTo() {
        return getObjectPropertyValues("objectsTo");
    }

    public boolean hasObjectsTo() {
        return hasProperty("objectsTo");
    }

    public Iterator<Idea> listObjectsTo() {
        return getObjectPropertyValues("objectsTo").iterator();
    }

    public void addObjectsTo(Idea newObjectsTo) {
    	this.removeInFavorOf(newObjectsTo);
        addObjectPropertyValue("objectsTo", newObjectsTo);
    }

    public void removeObjectsTo(Idea oldObjectsTo) {
        removeObjectPropertyValue("objectsTo", oldObjectsTo);
    }


    public void setObjectsTo(Collection<Idea> newObjectsTo) {
        setObjectPropertyValues("objectsTo", newObjectsTo);
    }


	@Override
	protected boolean canCopy() {		
		return false;
	}
    
    
}
