package br.ucam.kuabaSubsystem.kuabaModel.impl;

import java.sql.SQLException;
import java.util.*;

import com.compendium.core.ICoreConstants;
import com.compendium.core.datamodel.Link;
import com.compendium.core.datamodel.ModelSessionException;
import com.compendium.core.datamodel.NodeSummary;
import com.compendium.core.datamodel.View;

import br.ucam.kuabaSubsystem.kuabaModel.*;
import br.ucam.kuabaSubsystem.repositories.KuabaRepository;
import br.ucam.kuabaSubsystem.repositories.KuabaRepository;
import br.ucam.kuabaSubsystem.util.KuabaHelper;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#Idea
 *
 * @version generated on Sat Jun 21 10:48:19 BRT 2008
 */
public class DefaultIdea extends DefaultReasoningElement implements Idea {
    
    public DefaultIdea(String uri, KuabaRepository repo) {
        super(uri, repo);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#address

    public Collection<Question> getAddress() {
        return getObjectPropertyValues("address");
    }

    public boolean hasAddress() {
        return hasProperty("address");
    }

    public Iterator<Question> listAddress() {
        return getObjectPropertyValues("address").iterator();
    }


    public void addAddress(Question newAddress) {
        addObjectPropertyValue("address", newAddress);
    }


    public void removeAddress(Question oldAddress) {
        removeObjectPropertyValue("address", oldAddress);
    }


    public void setAddress(Collection<Question> newAddress) {
        setObjectPropertyValues("address", newAddress);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasArgument

    public Collection<Argument> getHasArgument() {
        return getObjectPropertyValues("hasArgument");
    }

    public boolean hasHasArgument() {
        return hasProperty("hasArgument");
    }

    public Iterator<Argument> listHasArgument() {
        return getObjectPropertyValues("hasArgument").iterator();
    }

    public void addHasArgument(Argument newHasArgument) {
        addObjectPropertyValue("hasArgument", newHasArgument);
    }

    public void removeHasArgument(Argument oldHasArgument) {
        removeObjectPropertyValue("hasArgument", oldHasArgument);
    }

    public void setHasArgument(Collection<Argument> newHasArgument) {
        setObjectPropertyValues("hasArgument", newHasArgument);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isConcludedBy

    public Collection<Decision> getIsConcludedBy() {
        return getObjectPropertyValues("isConcludedBy");
    }

    public boolean hasIsConcludedBy() {
        return hasProperty("isConcludedBy");
    }


    public Iterator<Decision> listIsConcludedBy() {
        return getObjectPropertyValues("isConcludedBy").iterator();
    }


    public void addIsConcludedBy(Decision newIsConcludedBy) {
        addObjectPropertyValue("isConcludedBy", newIsConcludedBy);
    }


    public void removeIsConcludedBy(Decision oldIsConcludedBy) {
        removeObjectPropertyValue("isConcludedBy", oldIsConcludedBy);
    }


    public void setIsConcludedBy(Collection<Decision> newIsConcludedBy) {
        setObjectPropertyValues("isConcludedBy", newIsConcludedBy);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isVersionOf

    public Idea getIsVersionOf() {
        Collection c = getObjectPropertyValues("isVersionOf");
        if (c.isEmpty()) return null;
        return (Idea) c.iterator().next();
    }

    public boolean hasIsVersionOf() {
        return hasProperty("isVersionOf");
    }


    public void setIsVersionOf(Idea newIsVersionOf) {
        Collection c = Collections.singleton(newIsVersionOf);
        setObjectPropertyValues("isVersionOf", c);
    }



    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#resultsIn

    public Collection<Artifact> getResultsIn() {
        return getObjectPropertyValues("resultsIn");
    }

    public boolean hasResultsIn() {
        return hasProperty("resultsIn");
    }


    public Iterator<Artifact> listResultsIn() {
        return getObjectPropertyValues("resultsIn").iterator();
    }


    public void addResultsIn(Artifact newResultsIn) {
        addObjectPropertyValue("resultsIn", newResultsIn);
    }


    public void removeResultsIn(Artifact oldResultsIn) {
        removeObjectPropertyValue("resultsIn", oldResultsIn);
    }


    public void setResultsIn(Collection<Artifact> newResultsIn) {
        setObjectPropertyValues("resultsIn", newResultsIn);
    }


//	@Override
//	public NodeSummary getView(View view, int x, int y) {
//		NodeSummary node = new NodeSummary();		
//		
//		try {
//			node.setId(ID_GENERATOR.nextVal() + "");
//			node.setCreationDate(new Date(), "Thiago");			
//			node.setType(ICoreConstants.POSITION, "Thiago");
//			node.setLabel(this.getHasText(), "Thiago");
//			view.addNodeToView(node, x, y);
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (ModelSessionException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		if(this.hasHasArgument()){
//			Collection<Argument> argumentCollection = this.getHasArgument();
//			for (Argument argument : argumentCollection) {
//				NodeSummary argumentNS = new NodeSummary();
//				try {
//					argumentNS.setId(argument.getId());
//					argumentNS.setLabel(argument.getHasText(), "");
//					argumentNS.setCreationDate(new Date(), "");
//					
//					view.addNodeToView(argumentNS, x + 50, y + 50);
//					String typeLink = "";
//					if(argument.getInFavorOf().contains(this)){
//						typeLink = ICoreConstants.SUPPORTS_LINK;
//						argumentNS.setType(ICoreConstants.PRO, "");
//					}
//					else{
//						typeLink = ICoreConstants.OBJECTS_TO_LINK;
//						argumentNS.setType(ICoreConstants.CON, "");
//					}
//					Link l = new Link(typeLink,
//							argumentNS, node, "", 
//							ICoreConstants.ARROW_TO);
//					l.setId(ID_GENERATOR.nextVal() + "");
//					view.addLinkToView(l);
//				} catch (SQLException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} catch (ModelSessionException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			}
//		}
//		
//		Collection<Question> suggests = this.getSuggests();
//		int count = -(suggests.size() * 100);
//		for (Question question : suggests) {
//			count +=100;
//			Link l = new Link(ICoreConstants.CHALLENGES_LINK,
//					question.getView(view, x+count, y+ 200), node, "Suggests", 
//					ICoreConstants.ARROW_FROM);
//			l.setId(ID_GENERATOR.nextVal() + "");
//			try {
//				view.addLinkToView(l);
//				
//			} catch (SQLException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} catch (ModelSessionException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
//		
//		return node;
//	
//	}

	@Override
	public Idea deepCopy(Map<ReasoningElement, Integer> stageMap, KuabaRepository targetRepository, Question question) {
		Idea cloneIdea = this;
		if(canCopy()){			
			cloneIdea = targetRepository.getModelFactory(
					).createIdea(UUID.randomUUID().toString());
			cloneIdea.setHasText(this.getHasText());
			Collection<Question> suggestedQuestionCol = this.getSuggests();
			for (Question suggestedQuestion : suggestedQuestionCol) {
				cloneIdea.addSuggests(suggestedQuestion.deepCopy(stageMap, targetRepository));			
			}					
		
			Collection<Question> addressedQuestionList = this.getAddress();	
                        
			for (Question addressedQuestion : addressedQuestionList) {
//                            System.out.println("stage da addressed("+addressedQuestion.getId()+"): "+stageMap.get(addressedQuestion));
//                            System.out.println("stage da corrente("+this.getId()+"): "+stageMap.get(this));
				if(stageMap.get(addressedQuestion)!=null && stageMap.get(addressedQuestion) > stageMap.get(this)){
					cloneIdea.addAddress(addressedQuestion);
					List<Decision> decisionList = KuabaHelper.constructIdeaDecisionMap(addressedQuestion).get(this);
					if(!decisionList.isEmpty() && decisionList.get(decisionList.size() - 1).getIsAccepted()){
						Decision ideaQuestionDecision = targetRepository.getModelFactory(
						).createDecision(UUID.randomUUID().toString());
						addressedQuestion.addHasDecision(ideaQuestionDecision);
						ideaQuestionDecision.setIsAccepted(true);
						ideaQuestionDecision.setHasDate(new GregorianCalendar());
						cloneIdea.addIsConcludedBy(ideaQuestionDecision);
					}
						
				}
			}			
		}			
	return cloneIdea;
	}


	
}
