package br.ucam.kuabaSubsystem.kuabaModel;

//import edu.stanford.smi.protegex.owl.model.*;

import java.util.*;

import com.compendium.core.datamodel.NodeSummary;
import com.compendium.core.datamodel.View;

import br.ucam.kuabaSubsystem.repositories.KuabaRepository;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 * Source OWL Class: http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#Question
 *
 * @version generated on Sat Jun 21 10:48:19 BRT 2008
 */
public interface Question extends ReasoningElement {

	public static final String XORTYPE = "XOR";
	public static final String ANDTYPE = "AND";
	public static final String ORTYPE = "OR";
        
        public static final String ROOT_QUESTION_ID = "root_question";
        
        public static final String DOMAIN_QUESTION_TEXT_PREFIX = "How to Model ";
	
    
	/**
	 * Makes a deep copy of the Question in the target KuabaRepository.
	 * @param targetRepository : the kuaba repository that will hold the deep copy.
	 * @return the deep copy of the Question.
	 */
	public Question deepCopy(Map<ReasoningElement, Integer> stageMap, KuabaRepository targetRepository);
        
//        public NodeSummary getView(View v, int x, int y);
        
        
    Collection<Decision> getHasDecision();

//    RDFProperty getHasDecisionProperty();
    
    boolean hasHasDecision();

    Iterator<Decision> listHasDecision();

    void addHasDecision(Decision newHasDecision);

    void removeHasDecision(Decision oldHasDecision);

    void setHasDecision(Collection<Decision> newHasDecision);


    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#hasType

    String getHasType();

//    RDFProperty getHasTypeProperty();

    boolean hasHasType();

    void setHasType(String newHasType);


    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isAddressedBy

    Collection<Idea> getIsAddressedBy();

//    RDFProperty getIsAddressedByProperty();

    boolean hasIsAddressedBy();

    Iterator<Idea> listIsAddressedBy();

    void addIsAddressedBy(Idea newIsAddressedBy);

    void removeIsAddressedBy(Idea oldIsAddressedBy);

    void setIsAddressedBy(Collection<Idea> newIsAddressedBy);


    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isSuggestedBy

    Collection<ReasoningElement> getIsSuggestedBy();

//    RDFProperty getIsSuggestedByProperty();

    boolean hasIsSuggestedBy();

    Iterator<ReasoningElement> listIsSuggestedBy();

    void addIsSuggestedBy(ReasoningElement newIsSuggestedBy);

    void removeIsSuggestedBy(ReasoningElement oldIsSuggestedBy);

    void setIsSuggestedBy(Collection<ReasoningElement> newIsSuggestedBy);


    // Property http://www.tecweb.inf.puc-rio.br/DesignRationale/KuabaOntology.owl#isVersionOf

    Question getIsVersionOf();

//    RDFProperty getIsVersionOfProperty();

    boolean hasIsVersionOf();

    void setIsVersionOf(Question newIsVersionOf);
}
